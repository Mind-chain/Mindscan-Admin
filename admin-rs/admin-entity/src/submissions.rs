//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use super::sea_orm_active_enums::SubmissionStatus;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "submissions")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub chain_id: i64,
    pub token_address: String,
    pub status: SubmissionStatus,
    pub blockscout_user_email: String,
    pub requester_name: String,
    pub requester_email: String,
    pub project_name: Option<String>,
    pub project_website: String,
    pub project_email: String,
    pub icon_url: String,
    pub project_description: String,
    pub project_sector: Option<String>,
    pub comment: Option<String>,
    pub docs: Option<String>,
    pub github: Option<String>,
    pub telegram: Option<String>,
    pub linkedin: Option<String>,
    pub discord: Option<String>,
    pub slack: Option<String>,
    pub twitter: Option<String>,
    pub open_sea: Option<String>,
    pub facebook: Option<String>,
    pub medium: Option<String>,
    pub reddit: Option<String>,
    pub support: Option<String>,
    pub coin_market_cap_ticker: Option<String>,
    pub coin_gecko_ticker: Option<String>,
    pub defi_llama_ticker: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::rejected_submissions::Entity")]
    RejectedSubmissions,
    #[sea_orm(has_many = "super::waiting_for_update_submissions::Entity")]
    WaitingForUpdateSubmissions,
}

impl Related<super::rejected_submissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RejectedSubmissions.def()
    }
}

impl Related<super::waiting_for_update_submissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WaitingForUpdateSubmissions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
